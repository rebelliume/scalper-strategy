//name        Scalper Strategy
//version     1.0.0
//author      rebelliume <rebelliume@gmail.com>
//contact     rebelliume
//copyright   rebelliume
//license     MIT
//released    2023/07/01

//@version=5
strategy(title = "Scalper Strategy", shorttitle = "SCS", overlay = false, max_bars_back = 500,  max_lines_count = 500, pyramiding = 1, currency = currency.USD, commission_value = 0.01, commission_type = strategy.commission.percent, default_qty_type = strategy.percent_of_equity, default_qty_value = 100, initial_capital = 100, slippage = 1, margin_long = 1, margin_short = 1)

ma10V	= ta.sma(close, 10)
ma10P	= 0
ma20V	= ta.sma(close, 20)
ma20P	= 0
ma30V	= ta.sma(close, 30)
ma30P	= 0
ma50V	= ta.sma(close, 50)
ma50P	= 0
ma100V	= ta.sma(close, 100)
ma100P	= 0
ma200V	= ta.sma(close, 200)
ma200P	= 0

if(close > ma10V)
	ma10P := 1
else if(close < ma10V)
	ma10P := -1
else
	ma10P := 0
if(close > ma20V)
	ma20P := 4
else if(close < ma20V)
	ma20P := -4
else
	ma20P := 0	
if(close > ma30V)
	ma30P := 2
else if(close < ma30V)
	ma30P := -2
else
	ma30P := 0
if(close > ma50V)
	ma50P := 1
else if(close < ma50V)
	ma50P := -1
else
	ma50P := 0
if(close > ma100V)
	ma100P := 1
else if(close < ma100V)
	ma100P := -1
else
	ma100P := 0
if(close > ma200V)
	ma200P := 2
else if(close < ma200V)
	ma200P := -2
else
	ma200P := 0

ema10V		= ta.ema(close, 10)
ema10P		= 0
ema20V		= ta.ema(close, 20)
ema20P		= 0
ema30V		= ta.ema(close, 30)
ema30P		= 0
ema50V		= ta.ema(close, 50)
ema50P		= 0
ema100V		= ta.ema(close, 100)
ema100P		= 0
ema200V		= ta.ema(close, 200)
ema200P		= 0

if(close > ema10V)
	ema10P := 3
else if(close < ema10V)
	ema10P := -3
else
	ema10P := 0
if(close > ema20V)
	ema20P := 1
else if(close < ema20V)
	ema20P := -1
else
	ema20P := 0
if(close > ema30V)
	ema30P := 3
else if(close < ema30V)
	ema30P := -3
else
	ema30P := 0
if(close > ema50V)
	ema50P := 2
else if(close < ema50V)
	ema50P := -2
else
	ema50P := 0
if(close > ema100V)
	ema100P := 3
else if(close < ema100V)
	ema100P := -3
else
	ema100P := 0
if(close > ema200V)
	ema200P := 1
else if(close < ema200V)
	ema200P := -1
else
	ema200P := 0

HMA(s, l)	=> ta.wma((2 * ta.wma(s, l / 2)) - ta.wma(s, l), math.round(math.sqrt(l)))
HMA3(s)		=> p = s / 2, ta.wma(ta.wma(close, p / 3) * 3 - ta.wma(close, p / 2) - ta.wma(close, p), p)
SM(s, l)	=>
    r	= 0.0
    sv	= s - nz(r[1], s)
    sm	= nz(r[1], s) + sv * math.sqrt(l * 2)
    ve	= 0.0
    ve	:= nz(ve[1], 0) + (l * sv)
    r	:= sm + ve

hma6VA		= SM(HMA(hl2, 6), 0.7)
hma6VB		= SM(HMA3(6), 0.7)
hma6P		= 0
hma12VA		= SM(HMA(hl2, 12), 0.7)
hma12VB		= SM(HMA3(12), 0.7)
hma12P		= 0
hma18VA		= SM(HMA(hl2, 18), 0.7)
hma18VB		= SM(HMA3(18), 0.7)
hma18P		= 0
hma22VA		= SM(HMA(hl2, 22), 0.7)
hma22VB		= SM(HMA3(22), 0.7)
hma22P		= 0

if(hma6VA < hma6VB)
	hma6P := 6
else if(hma6VA > hma6VB)
	hma6P := -6
else
	hma6P := 0
if(hma12VA < hma12VB)
	hma12P := 10
else if(hma12VA > hma12VB)
	hma12P := -10
else
	hma12P := 0
if(hma18VA < hma18VB)
	hma18P := 6
else if(hma18VA > hma18VB)
	hma18P := -6
else
	hma18P := 0
if(hma22VA < hma22VB)
	hma22P := 5
else if(hma22VA > hma22VB)
	hma22P := -5
else
	hma22P := 0

donChian(len)		=> math.avg(ta.lowest(len), ta.highest(len))
conversionLineValue	= donChian(9)
baseLineValue		= donChian(26)
BaseLineP 			= 0

if(conversionLineValue > baseLineValue)
	BaseLineP := 1
else if(conversionLineValue < baseLineValue)
	BaseLineP := -1
else
	BaseLineP := 0

volumewValue	= ta.vwma(close, 20)
volumewP		= 0

if(close[1] > volumewValue)
	volumewP := 1
else if(close[1] < volumewValue)
	volumewP := -1
else
	volumewP := 0

rsiValue	= ta.rsi(close, 14)
rsiPosition	= 0

if(rsiValue >= 77)
	rsiPosition := 4
else if(rsiValue <= 30)
	rsiPosition := -4
else
	rsiPosition := 0

stochValue1		= ta.sma(ta.stoch(close, high, low, 14), 1)
stochValue2		= ta.sma(stochValue1, 3)
stochPosition1	= 0
stochPosition2	= 0

if(stochValue1 >= 80)
	stochPosition1 := 4
else if(stochValue1 <= 20)
	stochPosition1 := -4
else
	stochPosition1 := 0

if(stochValue1 > stochValue2)
	stochPosition2 := 1
else if(stochValue1 < stochValue2)
	stochPosition2 := -1
else
	stochPosition2 := 0

slwstochValue1		= ta.sma(ta.stoch(close, high, low, 13), 5)
slwstochValue2		= ta.sma(slwstochValue1, 3)
slwstochPosition1	= 0
slwstochPosition2	= 0

if(slwstochValue1 >= 80)
	slwstochPosition1 := 5
else if(slwstochValue1 <= 20)
	slwstochPosition1 := -5
else
	slwstochPosition1 := 0

if(slwstochValue1 > slwstochValue2)
	slwstochPosition2 := 2
else if(slwstochValue1 < slwstochValue2)
	slwstochPosition2 := -2
else
	slwstochPosition2 := 0

strsiValue			= ta.rsi(close, 14)
stochrsiValue1		= ta.stoch(strsiValue, strsiValue, strsiValue, 14)
stochrsiValue2		= ta.sma(stochrsiValue1, 3)
stochrsiPosition1	= 0
stochrsiPosition2	= 0

if(stochrsiValue2 >= 70)
	stochrsiPosition1 := 5
else if(stochrsiValue2 <= 27)
	stochrsiPosition1 := -5
else
	stochrsiPosition1 := 0

if(stochrsiValue1 > stochrsiValue2)
	stochrsiPosition2 := 2
else if(stochrsiValue1 < stochrsiValue2)
	stochrsiPosition2 := -2
else
	stochrsiPosition2 := 0

MACDValue		= ta.ema(hl2, 16) - ta.ema(high, 36)
MACDSignalValue	= ta.ema(MACDValue, 7)
MACDHisto		= MACDValue - MACDSignalValue
MACDPosition	= 0

if(MACDValue < 0)
	MACDPosition := 1
else if(MACDValue > 0)
	MACDPosition := -1
else
	MACDPosition := 0

MACDCrossPosition = 0

if(MACDValue > MACDSignalValue)
	MACDCrossPosition := 5
else if(MACDValue < MACDSignalValue)
	MACDCrossPosition := -5
else
	MACDCrossPosition := 0

DMIUp		= ta.change(high)
DMIDown		= -ta.change(low)
plusDM		= na(DMIUp) ? na : (DMIUp > DMIDown and DMIUp > 0 ? DMIUp : 0)
minusDM		= na(DMIDown) ? na : (DMIDown > DMIUp and DMIDown > 0 ? DMIDown : 0)
DMItrur		= ta.rma(ta.tr, 14)
DMIplus		= fixnan(100 * ta.rma(plusDM, 8) / DMItrur)
DMIminus	= fixnan(100 * ta.rma(minusDM, 8) / DMItrur)
DMIsum		= DMIplus + DMIminus
DMIadx		= 100 * ta.rma(math.abs(DMIplus - DMIminus) / (DMIsum == 0 ? 1 : DMIsum), 14)
DMIPosition	= 0

if(DMIplus > DMIminus)
	DMIPosition := 4
else if(DMIplus < DMIminus)
	DMIPosition := -4
else
	DMIPosition := 0

cciValue	= (hlc3 - (ta.sma(hlc3, 20))) / (0.015 * ta.dev(hlc3, 20))
cciPosition	= 0

if(cciValue <= -40)
	cciPosition := 1
else if(cciValue >= 40)
	cciPosition := -1
else if(cciValue <= -80)
	cciPosition := 3
else if(cciValue >= 80)
	cciPosition := -3
if(cciValue <= -100)
	cciPosition := 5
else if(cciValue >= 100)
	cciPosition := -5

momentumCalc(seria, len) =>
	momData = seria - seria[len]
	momData
momValue1	= momentumCalc(close, 5)
momValue2	= momentumCalc(momValue1, 1)
momPosition = 0

if(momValue1 > 0)
	momPosition := 3
else if(momValue1 < 0)
	momPosition := -3
else
	momPosition := 0

superTrendxUp1			= hl2 - (2*(ta.sma(ta.tr, 18)))
superTrendxUp2			= nz(superTrendxUp1[1],superTrendxUp1)
superTrendxUp1			:= close[1] > superTrendxUp2 ? math.max(superTrendxUp1,superTrendxUp2) : superTrendxUp1
superTrendxDn1			= hl2 + (2*(ta.sma(ta.tr, 18)))
superTrendxDn2			= nz(superTrendxDn1[1], superTrendxDn1)
superTrendxDn1			:= close[1] < superTrendxDn2 ? math.min(superTrendxDn1, superTrendxDn2) : superTrendxDn1
superTrendxStatus		= 1
superTrendxStatus		:= nz(superTrendxStatus[1], superTrendxStatus)
superTrendxStatus		:= superTrendxStatus == -1 and close > superTrendxDn2 ? 1 : superTrendxStatus == 1 and close < superTrendxUp2 ? -1 : superTrendxStatus
superTrendPosition		= 0

if(superTrendxStatus == 1)
	superTrendPosition := 2
else if(superTrendxStatus == -1)
	superTrendPosition := -2
else
	superTrendPosition := 0

wlpCalc(length) =>
	max = ta.highest(length)
	min = ta.lowest(length)
	100 * (close - max) / (max - min)
wprValue = wlpCalc(14)
wprPosition = 0

if(wprValue > -25)
	wprPosition := 3
else if(wprValue < -75)
	wprPosition := -3
else
	wprPosition := 0

bbpRule1() =>
	if(close[1] < open)
		math.max(open - close[1], high - low)
	else
		high - low
bbpRule2() =>
	if(close[1] > open)
		math.max(close[1] - open, high-low)
	else
		high - low
bbpRule1 = bbpRule1()
bbpRule2 = bbpRule2()
bbpBull() =>
	if(close == open)
		if(high - close == close - low)
			if(close[1] > open)
				math.max(high - open, close - low)
			else
				bbpRule1
		if(high - close > close - low)
			if(close[1] < open)
				math.max(high - close[1], close - low)
			else
				high - open
		else
			bbpRule1
	if(close < open)
		if(close[1] < open)
			math.max(high - close[1], close - low)
		else
			math.max(high - open, close - low)	
	else
		bbpRule1
bbpBear() =>
	if(close == open)
		if(high - close == close - low)
			if(close[1] < open)
				math.max(open - low, high - close)
			else
				bbpRule2
		if(high - close > close - low)
			if(close[1] > open)
				math.max(close[1] - low, high - close)
			else
				open - low
		else
			bbpRule2
	if(close < open)
		bbpRule2
	else
		if(close[1] > open)
			math.max(close[1] - low, high - close)
		else
			math.max(open - low, high - close)
bbpPosition = 0
bbpBull = bbpBull()
bbpBear = bbpBear()
bbpBull := ta.sma(bbpBull - bbpBear, 30)
bbpBear := ta.sma(bbpBull - bbpBear, 30)

if(bbpBull > 0.1)
	bbpPosition := 3
else if(bbpBear < 0.1)
	bbpPosition := -3
else
	bbpPosition := 0

blkabsMove		= ((math.abs(close[6] - close[1]))/close[6]) * 100
blkrelMove		= blkabsMove >= 0.1
blkbullishOB	= close[6] < open[6]
blkbearishOB	= close[6] > open[6]

int blkUpCandles = 0
for i = 1 to 5
    blkUpCandles := blkUpCandles + (close[i] > open[i]? 1 : 0)
blkOBBull = blkbullishOB and (blkUpCandles == (5)) and blkrelMove

int blkDownCandles = 0
for i = 1 to 5
    blkDownCandles := blkDownCandles + (close[i] < open[i]? 1 : 0)
blkOBBear = blkbearishOB and (blkDownCandles == (5)) and blkrelMove

blkPosition	= 0

if(blkOBBull)
	blkPosition := 3
else if(blkOBBear)
	blkPosition := -3
else
	blkPosition := 0

RVI			= math.sum(ta.swma(close - open), 10) / math.sum(ta.swma(high - low),10)
RVISignal	= ta.swma(RVI)
RVIPosition	= 0

if(RVI > RVISignal)
	RVIPosition := 3
else if(RVI < RVISignal)
	RVIPosition := -3
else
	RVIPosition := 0

CMFAD = close == high and close == low or high == low ? 0 : ((2 * close - low - high) / (high - low)) * volume
CMF = math.sum(CMFAD, 20) / math.sum(volume, 20)
CMFPosition	= 0

if(CMF < 0)
	CMFPosition := 3
else if(CMF > 0)
	CMFPosition := -3
else
	CMFPosition := 0

maAVL	= input.int(defval = 6, minval = 3, maxval = 18, step = 1, title = "AVG Lenght", group = "MA Setting")
oscAVL	= input.int(defval = 6, minval = 1, maxval = 14, step = 1, title = "OSC Lenght", group = "MA Setting")
hmaVL	= input.int(defval = 1, minval = 0, maxval = 2, step = 1, title = "HMA Weight", group = "MA Setting")

dmiVAL	= input.int(defval = 14, minval = 9, maxval = 24, step = 1, title = "DMI Lenght", group = "Range Setting")
atrVAL	= input.float(defval = 0.6, minval = 0.1, maxval = 4, step = 0.1, title = "ATR Lenght", group = "Range Setting")

app		= input.bool(defval = false, title = "Automatic Position Period", group = "Strategy Setting - Date")
pdp		= input.int(defval = 10, minval = 1, maxval = 91, step = 1, title = "Position Day Period", group = "Strategy Setting - Date")
hld		= input.int(defval = 12, minval = 6, maxval = 18, step = 1, title = "Hight/Low Start Position", group = "Strategy Setting - Date")

stry	= input.int(defval = 2023, minval = 2019, maxval = 2023, title = "Start Position Year", group = "Strategy Setting - Date")
strm	= input.int(defval = 1, minval = 1, maxval = 12, title = "Start Position Month", group = "Strategy Setting - Date")
strd	= input.int(defval = 6, minval = 1, maxval = 31, title = "Start Position Date", group = "Strategy Setting - Date")
strh	= input.int(defval = 0, minval = 0, maxval = 24, title = "Start Position Hour", group = "Strategy Setting - Date")

ebs		= input.bool(defval = true, title = "Enable Buy Position", group = "Strategy Setting")
ess		= input.bool(defval = true, title = "Enable Sell Position", group = "Strategy Setting")

etp		= input.bool(defval = false, title = "Enable Profit Take", group = "Strategy Setting - TP")
ltpl	= input.float(defval = 2, minval = 0.3, maxval = 50, step = 0.1, title = "Long Profit Take", group = "Strategy Setting - TP")
stpl	= input.float(defval = 2, minval = 0.3, maxval = 50, step = 0.1, title = "Short Profit Take", group = "Strategy Setting - TP")

esl		= input.bool(defval = false, title = "Enable Stop Loss", group = "Strategy Setting - SL")
lsl		= input.float(defval = 1, minval = 0.3, maxval = 50, step = 0.1, title = "Long Stop Loss", group = "Strategy Setting - SL")
ssl		= input.float(defval = 1, minval = 0.3, maxval = 50, step = 0.1, title = "Short Stop Loss", group = "Strategy Setting - SL")

if(hmaVL == 0)
	hma22P := 0
if(hma22P != 0)
	hma22P := hma22P > 0 ? (hmaVL * 5) : (hmaVL * -5)

maAVG	= ma10P + ma20P + ma30P + ma50P + ma100P + ma200P
maAVG	:= maAVG + ema10P + ema20P + ema30P + ema50P + ema100P + ema200P
maAVG	:= maAVG + hma6P + hma12P + hma18P + hma22P
maAVG	:= maAVG + BaseLineP + volumewP

oscAVG	= MACDPosition + MACDCrossPosition + rsiPosition + stochPosition1 + stochPosition2 + slwstochPosition1 + slwstochPosition2 + stochrsiPosition1 + stochrsiPosition2
oscAVG	:= oscAVG + DMIPosition + cciPosition + momPosition + superTrendPosition + wprPosition + bbpPosition + blkPosition + CMFPosition + RVIPosition

h3p	= hline(42, title = "BUY (III)", color = color.rgb(255, 255, 255, 0), linestyle = hline.style_dashed)
h2p	= hline(21, title = "BUY", color = color.rgb(255, 255, 255, 100), linestyle = hline.style_dashed)
h1	= hline(0, title = "N", color = color.rgb(255, 255, 255, 70), linestyle = hline.style_dashed)
h2m	= hline(-21, title = "SELL", color = color.rgb(255, 255, 255, 100), linestyle = hline.style_dashed)
h3m	= hline(-42, title = "SELL (III)", color = color.rgb(255, 255, 255, 0), linestyle = hline.style_dashed)

fill(h1, h2p, color = color.rgb(200, 100, 100, 85))
fill(h2p, h3p, color = color.rgb(255, 100, 100, 82))

fill(h1, h2m, color = color.rgb(100, 200, 100, 85))
fill(h2m, h3m, color = color.rgb(100, 255, 100, 82))

tmc		= (timenow - (pdp * 86400000))
drb		= (time >= tmc)

ph = ta.pivothigh(hld, hld)
pl = ta.pivotlow(hld, hld)

if drb
	if not na(ph)
		label.new(bar_index[hld], 0, style = label.style_diamond, size = size.tiny, color = color.rgb(255, 255, 255 , 100), textcolor = color.rgb(255, 255, 255 , 100))
	if not na(pl)
		label.new(bar_index[hld], 0, style = label.style_diamond, size = size.tiny, color = color.rgb(255, 255, 255 , 100), textcolor = color.rgb(255, 255, 255 , 100))

larr		= label.all
larrsiz		= array.size(larr) > 0
stcnd		= 0

if larrsiz and barstate.isconfirmed
	stcnd := label.get_x(array.get(larr, 0))
	stcnd := last_bar_index - stcnd

cpd		= (stcnd * (1000 * timeframe.in_seconds(timeframe.period)))

idr		= (timestamp(syminfo.timezone, stry, strm, strd, strh, 0))

ocpd	= app ? (timenow - cpd) : idr

dr		= (time >= ocpd)
tfp		= timeframe.period == "15" or timeframe.period == "30" or timeframe.period == "60" or timeframe.period == "120" or timeframe.period == "180" or timeframe.period == "240" or timeframe.period == "D"

mm		= ta.ema(maAVG, maAVL)
nn		= ta.ema(oscAVG, oscAVL)

atrV	= math.round((ta.atr(14) / close) * 100)
atrVn	= ((ta.atr(14) / close) * 100)
if(atrV == 0)
    atrV := 1

rangd	= (DMIadx >= dmiVAL) and (DMIadx[1] >= dmiVAL) and (DMIadx[2] >= dmiVAL)
ranga	= (atrV > atrVAL) and (atrV[1] >= atrVAL) and (atrV[2] >= atrVAL)
rules	= dr and tfp and rangd and ranga

string[] m	= array.new_string(0)
float[] e	= array.new_float(0)
float[] f	= array.new_float(0)

mn(s, l)	=> ta.wma((2 * ta.wma(s, l / 2)) - ta.wma(s, l), math.round(math.sqrt(l)))
nm(s)		=> p = s / 2, ta.wma(ta.wma(mm, p / 3) * 3 - ta.wma(mm, p / 2) - ta.wma(mm, p), p)
nmo(s)		=> p = s / 2, ta.wma(ta.wma(nn, p / 3) * 3 - ta.wma(nn, p / 2) - ta.wma(nn, p), p)
m(s, l)	=>
    r	= 0.0
    sv	= s - nz(r[1], s)
    sm	= nz(r[1], s) + sv * math.sqrt(l * 2)
    ve	= 0.0
    ve	:= nz(ve[1], 0) + (l * sv)
    r	:= sm + ve

b(x, y) =>
	r	= m(mn(mm, x), 0.7)
	j	= m(nm(x), 0.7)

	p	= m(mn(nn, y), 0.7)
	q	= m(nmo(y), 0.7)

	s	= r<j and p<q and rules
	t	= j<r and q<p and rules

	g   = ta.valuewhen(s, close, 1)
	h   = ta.valuewhen(t, close, 1)
	u	= (((g - h) / h) * 100)
	v	= (((h - g) / g) * 100)

	array.push(m, str.format("{0}:{1}", x, y))
	array.push(e, (ta.cum((((g - h) > 0 and t and not t[1]) ? u : 0)) + ta.cum((((h - g) < 0 and s and not s[1]) ? v : 0))) - (ta.cum((((g - h) < 0 and t and not t[1]) ? u : 0)) + ta.cum((((h - g) > 0 and s and not s[1]) ? v : 0))))

b(8,6),b(8,7),b(8,8),b(8,9),b(8,10),b(8,11),b(8,12),b(9,6),b(9,7),b(9,8),b(9,9),b(9,10),b(9,11),b(9,12),b(10,6),b(10,7),b(10,8),b(10,9),b(10,10),b(10,11),b(10,12),b(11,6),b(11,7),b(11,8),b(11,9),b(11,10),b(11,11),b(11,12),b(12,6),b(12,7),b(12,8),b(12,9),b(12,10),b(12,11),b(12,12),b(14,6),b(14,7),b(14,8),b(14,9),b(14,10),b(14,11),b(14,12),b(16,6),b(16,7),b(16,8),b(16,9),b(16,10),b(16,11),b(16,12)

w		= array.max(e)
x		= array.indexof(e, w)

array.clear(e)

arrval	= str.split(array.get(m, x), ":")
arrvalv	= int(str.tonumber(array.get(arrval, 0)))
arrvalw	= int(str.tonumber(array.get(arrval, 1)))

hAVA	= m(mn(mm, arrvalv), 0.7)
hAVB	= m(nm(arrvalv), 0.7)
oAVA	= m(mn(nn, arrvalw), 0.7)
oAVB	= m(nmo(arrvalw), 0.7)

hAVA	:= ta.sma(hAVA, 2)
hAVB	:= ta.sma(hAVB, 2)
oAVA	:= ta.sma(oAVA, 2)
oAVB	:= ta.sma(oAVB, 2)

array.clear(m)

lC		= hAVA < hAVB
sC		= hAVB < hAVA		
lC		:= lC and oAVA < oAVB
sC		:= sC and oAVB < oAVA

plot(hAVA, color = color.rgb(50, 100, 200, 0), offset = 0)
plot(hAVB, color = color.rgb(200, 100, 50, 0), offset = 0)

plot(oAVA, color = color.rgb(100, 255, 255, 0), offset = 0)
plot(oAVB, color = color.rgb(255, 255, 100, 0), offset = 0)

plotshape(lC and not lC[1] and rules ? hAVA : na, title = "", style = shape.circle, color = color.rgb(15, 255, 130, 0), textcolor = color.rgb(15, 255, 130, 0), size = size.tiny, location = location.absolute, offset = 0, text = "")
plotshape(sC and not sC[1] and rules ? hAVB : na, title = "", style = shape.circle, color = color.rgb(255, 0, 0, 0), textcolor = color.rgb(255, 0, 0, 0),  size = size.tiny, location = location.absolute, offset = 0, text = "")

lsp  = strategy.position_avg_price * (1 - (lsl * 0.01))
stp = strategy.position_avg_price * (1 + (ssl * 0.01))
lp  = strategy.position_avg_price * (1 + (ltpl * 0.01))
sp = strategy.position_avg_price * (1 - (stpl * 0.01))

if (lC and not lC[1] and ebs and rules)	
    strategy.entry("LP", strategy.long, comment = "LONG")
	alert("$" + syminfo.ticker + " LONG:" + str.tostring(close) + " SL:" + str.tostring(atrV * 2), alert.freq_once_per_bar_close)
if (sC and not sC[1] and ess and rules)
    strategy.entry("SP", strategy.short, comment = "SHORT")
	alert("$" + syminfo.ticker + " SHORT:" + str.tostring(close) + " SL:" + str.tostring(atrV * 2), alert.freq_once_per_bar_close)
if (sC and not sC[1] and ebs and rules and not ess)	
    strategy.close("LP", comment = "TP")
	alert("$" + syminfo.ticker + " TP:" + str.tostring(close), alert.freq_once_per_bar_close)
if (lC and not lC[1] and ess and rules and not ebs)
    strategy.close("SP", comment = "TP")
	alert("$" + syminfo.ticker + " TP:" + str.tostring(close), alert.freq_once_per_bar_close)
if (strategy.position_size > 0)
	if(close <= lsp and esl)
		strategy.exit("LP", stop = lsp, comment = "SL")	
		alert("$" + syminfo.ticker + " SL:" + str.tostring(close), alert.freq_once_per_bar_close)
	if(close >= lp and etp)
		strategy.exit("LP", limit = lp, comment = "TP")
		alert("$" + syminfo.ticker + " TP:" + str.tostring(close), alert.freq_once_per_bar_close)
if (strategy.position_size < 0)
	if(close >= stp and esl)
		strategy.exit("SP", stop = stp, comment = "SL")	
		alert("$" + syminfo.ticker + " SL:" + str.tostring(close), alert.freq_once_per_bar_close)
	if(close <= sp and etp)
		strategy.exit("SP", limit = sp, comment = "TP")
		alert("$" + syminfo.ticker + " TP:" + str.tostring(close), alert.freq_once_per_bar_close)